import math
import numpy as np
from math import sin, cos, pi
from scipy.signal import find_peaks

note_dict = {
    261.626: "C",
    277.183: "C#",
    293.665: "D",
    311.127: "D#",
    329.628: "E",
    349.228: "F",
    369.994: "F#",
    391.995: "G",
    415.305: "G#",
    440.000: "A",
    466.164: "A#",
    493.883: "B",
}

note_frequencies = [
    261.626,
    277.183,
    293.665,
    311.127,
    329.628,
    349.228,
    369.994,
    391.995,
    415.305,
    440.000,
    466.164,
    493.883
]

min_comp_freq = 255.0
max_comp_freq = 505.0

min_third = pow(2.0, 3.0/12.0)
maj_third = pow(2.0, 4.0/12.0)


def fft(X: list[float]) -> list[float]:
    N = len(X)
    if N == 1:
        return X
    Xodd = []
    Xeven = []
    for i in range(N):
        if i % 2 == 0:
            Xeven.append(X[i])
        else:
            Xodd.append(X[i])
    Yodd = fft(Xodd)
    Yeven = fft(Xeven)
    Y = [0] * N
    arg = -2*pi/N
    for k in range(N//2):
        root = complex(real=cos(arg*k), imag=sin(arg*k))
        Y[k] = Yeven[k] + root*Yodd[k]
        Y[k+N//2] = Yeven[k] - root*Yodd[k]
    return Y


def fft_freq_bins(num_samples, sample_interval):
    result = np.arange(0, num_samples, sample_interval)
    return result


def fft_find_peaks(signal):
    peak_indices, _ = find_peaks(signal)  # maybe try to implement this? probably not worth it
    return peak_indices


def find_closest(freq):
    while freq < min_comp_freq:
        freq *= 2
    while freq > max_comp_freq:
        freq /= 2
    closest_freq = note_frequencies[0]
    min_dist = abs(note_frequencies[0] - freq)
    for i in range(len(note_frequencies)):
        dist = abs(note_frequencies[i] - freq)
        if dist < min_dist:
            min_dist = dist
            closest_freq = note_frequencies[i]
    return closest_freq


def get_exact_freqs(frequencies):
    exact_frequencies = []
    for freq in frequencies:
        exact_frequencies.append(find_closest(freq))
    return exact_frequencies


def get_note_names(frequencies):
    # Should only put exact frequencies into this
    note_names = []
    for freq in frequencies:
        note_names.append(note_dict[freq])
    return note_names


def is_root_pos(frequencies):
    tolerance = 0.03 # might need some tolerance in ratios between notes - may need to adjust
    first_interval = frequencies[1] / frequencies[0]
    second_interval = frequencies[2] / frequencies[1]
    int1_is_min_third = abs(first_interval - min_third) < tolerance
    int2_is_min_third = abs(second_interval - min_third) < tolerance
    int1_is_maj_third = abs(first_interval - maj_third) < tolerance
    int2_is_maj_third = abs(second_interval - maj_third) < tolerance
    is_root_pos = (int1_is_maj_third or int1_is_min_third) and (int2_is_maj_third or int2_is_min_third)
    if is_root_pos:
        if int1_is_maj_third and int2_is_min_third:
            chord_type = "maj"
        elif int1_is_min_third and int2_is_maj_third:
            chord_type = "min"
        elif int1_is_min_third and int2_is_min_third:
            chord_type = "dim"
        else:
            chord_type = "n/a"
        return ["T", chord_type]
    else:
        return ["F", "n/a"]


def get_chord_type(frequencies):
    while not is_root_pos(frequencies)[0] == "T":
        frequencies[0] *= 2
        frequencies.sort() # Make sure this is correct order
    root_note = note_dict[find_closest(frequencies[0])]
    return root_note, is_root_pos(frequencies)[1], frequencies # returns frequencies sorted


def get_chord_inversion(bass_note, root_pos_notes):
    for i in range(len(root_pos_notes)):
        if root_pos_notes[i] == bass_note:
            return i
    return -1


# TODO read in waveforms, turn into loop to handle multiple
num_samples = 512
duration = 0.2
waveform = [0.0, 2.8400308461748, 1.2793237258699723, -1.7406973368003973, -1.647164968960494, 0.336833957908135, 0.9043194038596063, 0.4325898101092598, 0.32546228588009435, -0.22520718820620633, -1.1633331692214568, -0.5023422597994092, 1.212481559025743, 0.9777815827227866, -0.8231834449710627, -0.8280177532605275, 0.6779816659406387, 0.3810773615022958, -1.0985736312944483, -0.29638980401767223, 1.7179158554777378, 0.8771571951673011, -1.8222286129097274, -1.7086059775460172, 1.0537123357634015, 1.9733128969505036, 0.17259805431764352, -1.1805590671563606, -0.9400691703806419, -0.3392706166493884, 0.580022206753749, 1.6330889005215568, 0.7457210804307624, -1.8701811571948672, -2.143258469014077, 1.0040840325567193, 2.692978456434195, 0.21282912838907925, -2.164171334174046, -0.8667143880281606, 1.1355357442305647, 0.6153060950418301, -0.4415075338996025, 0.10938311400664258, 0.44914212215410043, -0.5762165204123922, -0.802425741895011, 0.45624953097727394, 0.8388189703229983, -0.11018855875633282, -0.27590125195288084, 0.20785492956529017, -0.4733244578009952, -1.0368536120836025, 0.6571265879790196, 2.1454278258734703, 0.10014316856752714, -2.6692247452466553, -1.3755595242681526, 2.0752739317137854, 2.2214834371972874, -0.6695259806844673, -1.9251594563180658, -0.5940901001170138, 0.6055156939648909, 0.8593437873525339, 0.8713488392272053, -0.03804900449346171, -1.5894203452109326, -1.1617261915976813, 1.2959732978233416, 1.8586006342991728, -0.5288282694715409, -1.720314821296439, 0.07543656403294757, 1.1630215853107186, -0.26444960641422044, -0.8810186457562716, 0.7219582563312883, 1.1570553424166106, -0.7933970137264648, -1.5895201965210544, 0.22727205561599995, 1.4859678280564612, 0.519792540301359, -0.5616350405892137, -0.6540686984421629, -0.7043304288747926, -0.22666308987293704, 1.4043607312853092, 1.7017543634884307, -0.9601921399345912, -2.800448487030192, -0.3552216045415668, 2.7685018137916577, 1.5982407533369059, -1.677890180438347, -1.8970944319542218, 0.35696443164865543, 1.1273898688819606, 0.2950599361377809, 0.04788101107073474, -0.01623294473639192, -0.7866236923777259, -0.6876536973624133, 0.7772413224308282, 1.0735031995596747, -0.431018926193791, -0.8549556942799463, 0.41308717720298416, 0.43245015325633285, -0.9617074950510471, -0.4626902212933681, 1.6293192067109272, 1.1741140191361188, -1.690381764331454, -2.069130945218649, 0.8500907798196692, 2.308177313583404, 0.3965645814600649, -1.4529624252268605, -1.1057355611935056, -0.09062264654730962, 0.6544102540629592, 1.3404903053175399, 0.7230007628470596, -1.5085040752561767, -2.1025152667707037, 0.620886588657398, 2.606500548216916, 0.537166805445451, -2.080718709258856, -1.0934022322807053, 1.14355129050763, 0.7882460217710492, -0.5916744654518389, -0.1047735760962665, 0.7046980749457893, -0.2541905432441073, -1.0627550912766752, 0.04694470179428667, 1.0180611230998624, 0.29162001438964485, -0.369897855370826, -0.09190263101169122, -0.38858719010146847, -0.8614017094352558, 0.49291275802719403, 2.035368970652511, 0.3714885366421935, -2.5438178018994195, -1.7038447059904844, 1.9050723199481787, 2.530809048141955, -0.4983530732421824, -2.1856012684768724, -0.6960652711044724, 0.8586336284171298, 0.8667964953804764, 0.5561905426972213, 0.0004542068753154993, -1.1876619347154422, -1.1649756793591473, 0.8620999498922381, 1.7884114434260054, -0.15859998231603414, -1.6233457577930082, -0.1729582672979895, 1.1390873006807152, -0.10743285713514283, -1.0028915766489837, 0.5598780278873765, 1.410203873827792, -0.5422396789204007, -1.8837477601922896, -0.11700260258854828, 1.7287594626582472, 0.8816200782391341, -0.7298740215968588, -0.9442861728256039, -0.5550497816664027, -0.03812008518806176, 1.197961256147197, 1.56959077773271, -0.6718168273575393, -2.655852297214887, -0.6785107088110425, 2.589812312428238, 1.8851135490853006, -1.5146874901947482, -2.1230901872255648, 0.2850079291679122, 1.3431529631509607, 0.24735345860251723, -0.2408448381364292, 0.09780762209189497, -0.3862339895605101, -0.7713540278422549, 0.3138024635539317, 1.0669026188858717, -0.00907294872719755, -0.7872788121164815, 0.11239796863235871, 0.40058093200237976, -0.7758378272529811, -0.5532534856864321, 1.4758164569328946, 1.3956255315376345, -1.4828331482814021, -2.3513541800441677, 0.5691127749457732, 2.5667297519828005, 0.6939550568914097, -1.6606694477703474, -1.3435352230484492, 0.11167428208718366, 0.8080340362551228, 1.077501432577847, 0.6073772224870655, -1.1680327054958184, -1.956576287056305, 0.2582811962352114, 2.4111896986956998, 0.8409135277937264, -1.8939340211738052, -1.3063253876438625, 1.056410377798418, 0.9623158584981938, -0.6500152605919648, -0.33719805626311683, 0.8649852983367556, 0.09797804353055584, -1.2227759852801245, -0.3966962542984327, 1.0977305971600617, 0.7290276015233613, -0.37353410641964524, -0.4330530779982184, -0.3811218981111213, -0.6310406470675121, 0.3968966497397959, 1.8534500386856472, 0.5756193441083208, -2.3344181475951156, -1.9613839313908885, 1.6485926330325567, 2.7696545591345703, -0.2457662273305205, -2.3854919377888373, -0.8756522464741281, 1.0690685595327585, 0.9558100897477252, 0.2657963070234457, -0.05376827213472324, -0.8000082645336951, -1.0642686892605941, 0.43953201324394153, 1.6104049189038054, 0.2015387131587965, -1.4233686482964791, -0.41819756796450686, 1.019927009570444, 0.0608035191733744, -1.0329720599118741, 0.370091017356199, 1.5684352374823853, -0.25223172582608927, -2.0783132185525366, -0.5032098087258406, 1.873111112192213, 1.2850201604285005, -0.8100934031971161, -1.2801794494416612, -0.4785039448300238, 0.20871153964372552, 1.0525083522106522, 1.3616966109309527, -0.4412550963913371, -2.4217479821201016, -0.9410539311564525, 2.3176070086950578, 2.110401463849335, -1.2622660798042444, -2.295458431395591, 0.12877893146860375, 1.521574408855263, 0.28546556173937476, -0.509781392400562, 0.11747752686114254, 0.005813777526458508, -0.7514128406090408, -0.14533853928470747, 0.953936289217783, 0.4108305145174198, -0.6187398394498446, -0.193870894712317, 0.2762464532135308, -0.5694124106171976, -0.5552436925792278, 1.284604120912647, 1.5253577875252424, -1.2260397718934262, -2.5362853539431693, 0.23635155297867172, 2.7282562325104047, 1.0409316332712526, -1.7815861072969335, -1.6323375811664949, 0.2437773233997077, 1.0228654008892635, 0.8702601291479025, 0.41414233724971855, -0.8772168058952825, -1.7186349302409818, -0.053722454403859365, 2.11832882737467, 1.093572655003304, -1.6126260902227645, -1.4751545250657578, 0.8795288454654393, 1.1072178111180295, -0.6180282157271179, -0.5570317957112434, 0.9278931948452396, 0.44857050641784707, -1.2776456343296552, -0.8425920852296291, 1.070955948725381, 1.1706972307907337, -0.2778721966652, -0.7860018167379641, -0.46261025539332146, -0.37335198528329605, 0.3841450591088029, 1.6256775899026432, 0.6941287113845336, -2.0659754115219116, -2.1272129884157116, 1.329653320316868, 2.9154340018221827, 0.06633010713240406, -2.501018853842134, -1.1138119685426409, 1.2114554910958606, 1.110621583361688, 0.027637238699182554, -0.187859400654664, -0.456095688339454, -0.8702586662699283, 0.05933542214911425, 1.3333252240844007, 0.520222261931609, -1.126734184857972, -0.6293849888373109, 0.8085717661336154, 0.20979497057219576, -0.9703578020011838, 0.18321370015136357, 1.6271234316962921, 0.045466317322966465, -2.165718523811199, -0.9000113890162187, 1.9094340381485968, 1.699500974051233, -0.7907092583346067, -1.633109721268976, -0.4888431708058588, 0.4873854966030461, 0.9853296313642114, 1.1027063081835362, -0.28899377991029374, -2.121478245872262, -1.119965468989435, 1.9739095050395918, 2.2497800015560525, -0.9405829872369771, -2.3888868698515724, -0.09479900352242976, 1.636057405237278, 0.3959635300876101, -0.7304547360583953, 0.05307521645357283, 0.3590234768750162, -0.6357659779669603, -0.5683380333239074, 0.7406084715263289, 0.7966577286288952, -0.353055585472503, -0.4743780976456268, 0.05999257795949664, -0.37298902661106487, -0.4653634993305636, 1.0859822054867427, 1.5562792922387048, -0.9504808563268838, -2.613953293604425, -0.1177964850557306, 2.780656897186535, 1.4081194290689545, -1.8016673343814849, -1.9447769135930038, 0.2892031678278464, 1.2739157503422238, 0.7382751825119631, 0.16627156477167876, -0.6585863996081593, -1.410207800563127, -0.29033812347733645, 1.7480134016891409, 1.2691225550794103, -1.254757125149109, -1.573176312324622, 0.6277323079031343, 1.1953066195932376, -0.5068590147096617, -0.7350719729410026, 0.9011837649510444, 0.7665726696176939, -1.2325466557346418, -1.2584840119778145, 0.9408981037991858, 1.584255621138642, -0.0838465221247019, -1.1192160638040525, -0.635138458020095, -0.11882026180451732, 0.46044412002413626, 1.3819362395753483, 0.7175753163986672, -1.7682164626104278, -2.188982786658128, 0.9776229477721587, 2.9537159375505744, 0.40981110829057077, -2.5159077515310746, -1.3846463361814072, 1.2672239752564787, 1.3079516772272763, -0.13681994209654647, -0.38078991612882823, -0.18032466988265183, -0.6023489619835594, -0.2519138087776376, 0.9750959598932893, 0.7697914777999658, -0.749248626018077, -0.7784488478919738, 0.517690849554047, 0.3109214887348348, -0.8239421381283994, 0.029029627137127423, 1.5915833337616592, 0.31956480654906516, -2.1484842926502568, -1.275057151526164, 1.8380934919176735, 2.09271328661087, -0.6698572106781981, -1.9717040123498561, -0.5908560622420663, 0.7677857916149556, 1.0047913851408479, 0.8218722135967016, -0.22695478557272286, -1.7838779699559792, -1.2005052529794913, 1.5869782610734118, 2.286555260050538, -0.5764566344068518, -2.3850313317918714, -0.36136189297378263, 1.6661831802860867, 0.5573870401229727, -0.8797289282478183, -0.07648912544527636, 0.6474188372482134, -0.4414703685060583, -0.9270845413230605, 0.4424073558156367, 1.1192945020504648, -0.0036321340593774565, -0.6998019075179436, -0.23784109410183396, -0.21609927246265448, -0.2901840613535724, 0.9102480852984728, 1.4912922469804377, -0.6876029478228263, -2.5843257219750377, -0.4610879116228924, 2.721639140393302, 1.763470625715599, -1.716372389388491, -2.249971674383425, 0.2405389466837501, 1.5317851356314083, 0.69246776191514, -0.10793801304350048, -0.5265611964145585, -1.058973347375529, -0.43440066997210347, 1.3272074226223785, 1.3485920657505899, -0.8457382904410772, -1.5800204058287504, 0.323814555437457, 1.2044480077645703, -0.33613890010285963, -0.846743991290081, 0.8016163752476919, 1.0247397891289558, -1.1020981763586293]

fft_result = np.abs(fft(waveform))
pos_result = fft_result[:len(fft_result)//2]  # Only the first half of the output corresponds to real frequencies
freq_bins = fft_freq_bins(len(pos_result), duration/num_samples)  # sample interval = duration / num_samples
freq_bins_temp = np.fft.fftfreq(len(fft_result), duration/num_samples)
freq_bins_temp = freq_bins_temp[:len(freq_bins_temp)//2]
peak_indices = fft_find_peaks(pos_result)
peak_frequencies = freq_bins_temp[peak_indices]

print(peak_frequencies)

# Above is fft code, below is chord determination code

exact_frequencies = get_exact_freqs(peak_frequencies)

print(exact_frequencies)

notes = get_note_names(exact_frequencies) # only used to print out in ascending freq order
bass_note = notes[0]

root, chord_type, root_pos_freqs = get_chord_type(exact_frequencies)
root_pos_exact_freqs = get_exact_freqs(root_pos_freqs)
root_pos_notes = get_note_names(root_pos_exact_freqs)
inversion = get_chord_inversion(bass_note, root_pos_notes)

# Print out: notes, root, chord type, inversion
print(notes)
print(root)
print(chord_type)
print(inversion)
